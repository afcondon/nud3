module Examples.Miserables where

import Nud3

import Effect (Effect)
import Nud3.Attributes (Attribute(..), foldAttributes)
import Nud3.Types (KeyFunction(..))
import Prelude (Unit, bind, pure, unit, ($))
import Simulation as Simulation

-- | ForceLayout example

colorByGroup :: Int -> String -- placeholder generated by copilot 
colorByGroup group =
  case group of
    0 -> "#1f77b4"
    1 -> "#ff7f0e"
    2 -> "#2ca02c"
    3 -> "#d62728"
    4 -> "#9467bd"
    5 -> "#8c564b"
    6 -> "#e377c2"
    7 -> "#7f7f7f"
    8 -> "#bcbd22"
    9 -> "#17becf"
    _ -> "#000000"

drawForceLayout :: Number -> Number -> Simulation.Model -> Effect Unit
drawForceLayout width height model = do
  let root = select (SelectorString "div#miserables")
  svg <- addElement root $ Append $ SVG "svg"
  let
    _ = foldAttributes svg
      [ ViewBox 0 0 650 650
      , Classed "force-layout"
      , Width width
      , Height height
      ]
  linksGroup <- addElement svg $ Append (SVG "g")
  let _ = foldAttributes linksGroup [ Classed "link", StrokeColor "#999", StrokeOpacity 0.6 ]
  nodesGroup <- addElement svg $ Append (SVG "g")
  let _ = foldAttributes nodesGroup [ Classed "node", StrokeColor "#fff", StrokeOpacity 1.5 ]

  simulator <- Simulation.newEngine -- these params are just the defaults in D3 anyway, for now
    { alpha: 0.1
    , alphaMin: 0.001
    , alphaDecay: 0.0228
    , alphaTarget: 0.0
    , velocityDecay: 0.4
    }
  -- side-effects ahoy, the data in these selections will change as the simulator runs
  simNodes <- Simulation.addNodes
    { simulator
    , nodes: model.nodes
    , key: \d -> d.id
    }

  _ <- Simulation.onTickNode simulator simNodes [ CX_ \d _ -> d.x, CY_ \d _ -> d.y ]
  _ <- Simulation.onDrag simulator simNodes Simulation.DefaultDragBehavior

  simLinks <- Simulation.addLinks
    { simulator
    , nodes: model.nodes
    , links: model.links
    , key: \d -> d.id
    }

  _ <- Simulation.onTickLink simulator simLinks
    [ X1_ \l _ -> l.source.x
    , Y1_ \l _ -> l.source.y
    , X2_ \l _ -> l.target.x
    , Y2_ \l _ -> l.target.y
    ]

  nodes <- visualize
    { what: Append (SVG "circle")
    , using: NewData simNodes
    , where: nodesGroup
    , key: IdentityKey
    , attributes:
        { enter:
            [ Radius 5.0
            , Fill_ \d _ -> colorByGroup d.group
            ]
        , exit: [] -- Remove is the default, no need for other attrs here
        , update: []
        }
    }

  links <- visualize
    { what: Append (SVG "line")
    , using: NewData simLinks
    , where: linksGroup
    , key: IdentityKey
    , attributes:
        { enter:
            [ StrokeWidth 1.5
            , StrokeColor "#555"
            , StrokeOpacity 0.4
            , Fill "none"
            ]
        , exit: [] -- Remove is the default, no need for other attrs here
        , update: []
        }
    }

  pure unit
